/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>

#include <kern/picirq.h>

#ifdef CONFIG_KSPACE
.comm intr_ret_eip, 4
.comm intr_ebp_reg, 4
.comm intr_esp_reg, 4
.comm intr_cs, 4
.comm intr_eflags, 4
#endif


###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps


.text

.globl _alltraps
.type _alltraps, @function;
.align 2
_alltraps:
	// lab 8
	pushl %ds
	pushl %es
	pushal	
	movw $GD_KD, %ax
	movw %ax, %ds
	movw %ax, %es
	pushl %esp
	call trap
    
	//jmp .

.globl clock_thdlr
.type clock_thdlr, @function;
.align 2;
#ifdef CONFIG_KSPACE
clock_thdlr:
	popl intr_ret_eip
	popl intr_cs
	popl intr_eflags
	movl %ebp, intr_ebp_reg
	movl %esp, intr_esp_reg
	movl $0x0,%ebp
	movl $(bootstacktop),%esp
	pushl $GD_KD
	pushl intr_esp_reg
	pushl intr_eflags
	pushl intr_cs
	pushl intr_ret_eip
	pushl $0
	pushl $(IRQ_OFFSET + IRQ_CLOCK)
	pushl %ds
	pushl %es

	pushl %eax
	pushl %ecx
	pushl %edx
	pushl %ebx
	pushl intr_esp_reg
	pushl intr_ebp_reg
	pushl %esi
	pushl %edi

	pushl %esp  /* trap(%esp) */
	call trap
	jmp .
#else
TRAPHANDLER_NOEC(clock_thdlr, IRQ_OFFSET + IRQ_CLOCK)
// LAB 8: Your code here.

// #define T_DIVIDE     0		// divide error
// #define T_DEBUG      1		// debug exception
// #define T_NMI        2		// non-maskable interrupt
// #define T_BRKPT      3		// breakpoint
// #define T_OFLOW      4		// overflow
// #define T_BOUND      5		// bounds check
// #define T_ILLOP      6		// illegal opcode
// #define T_DEVICE     7		// device not available
// #define T_DBLFLT     8		// double fault
/* #define T_COPROC  9 */	// reserved (not generated by recent processors)
// #define T_TSS       10		// invalid task switch segment
// #define T_SEGNP     11		// segment not present
// #define T_STACK     12		// stack exception
// #define T_GPFLT     13		// general protection fault
// #define T_PGFLT     14		// page fault
/* #define T_RES    15 */	// reserved
// #define T_FPERR     16		// floating point error
// #define T_ALIGN     17		// aligment check
// #define T_MCHK      18		// machine check
// #define T_SIMDERR   19		// SIMD floating point error
// #define T_SYSCALL   48		// system call

// Hardware IRQ numbers. We receive these as (IRQ_OFFSET+IRQ_WHATEVER)
// #define IRQ_TIMER        0
// #define IRQ_KBD          1
// #define IRQ_SERIAL       4
// #define IRQ_SPURIOUS     7
// #define IRQ_CLOCK        8
// #define IRQ_IDE         14
// #define IRQ_ERROR       19

TRAPHANDLER_NOEC(divide_thdlr, T_DIVIDE);
TRAPHANDLER_NOEC(debug_thdlr, T_DEBUG);
TRAPHANDLER_NOEC(nmi_thdlr, T_NMI);
TRAPHANDLER_NOEC(brkpt_thdlr, T_BRKPT);
TRAPHANDLER_NOEC(oflow_thdlr, T_OFLOW);
TRAPHANDLER_NOEC(bound_thdlr, T_BOUND);
TRAPHANDLER_NOEC(illop_thdlr, T_ILLOP);
TRAPHANDLER_NOEC(device_thdlr, T_DEVICE);
TRAPHANDLER(dblflt_thdlr, T_DBLFLT);
TRAPHANDLER(tss_thdlr, T_TSS);
TRAPHANDLER(segnp_thdlr, T_SEGNP);
TRAPHANDLER(stack_thdlr, T_STACK);
TRAPHANDLER(gpflt_thdlr, T_GPFLT);
TRAPHANDLER(pgflt_thdlr, T_PGFLT);
TRAPHANDLER_NOEC(fperr_thdlr, T_FPERR);
TRAPHANDLER(align_thdlr, T_ALIGN);
TRAPHANDLER_NOEC(mchk_thdlr, T_MCHK);
TRAPHANDLER_NOEC(simderr_thdlr, T_SIMDERR);
TRAPHANDLER_NOEC(syscall_thdlr, T_SYSCALL);

TRAPHANDLER_NOEC(irq_timer_thdlr, IRQ_OFFSET + IRQ_TIMER);
TRAPHANDLER_NOEC(irq_kbd_thdlr, IRQ_OFFSET + IRQ_KBD);
TRAPHANDLER_NOEC(irq_serial_thdlr, IRQ_OFFSET + IRQ_SERIAL);
TRAPHANDLER_NOEC(irq_spurious_thdlr, IRQ_OFFSET + IRQ_SPURIOUS);
TRAPHANDLER_NOEC(irq_ide_thdlr, IRQ_OFFSET + IRQ_IDE);
TRAPHANDLER_NOEC(irq_error_thdlr, IRQ_OFFSET + IRQ_ERROR);

#endif
